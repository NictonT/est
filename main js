// Configuration
const CONFIG = {
    // Google Docs published URL
    docsUrl: 'https://docs.google.com/document/d/e/2PACX-1vTwkALtdtu63ywmjotmY_pDohbrq4AqaO4VgBR2nO_eFDGil7upciaDH-idDLZAphJ9MHEeptzpjlP6/pub',
    documentsPerPage: 12,
    defaultFilters: {
        category: 'all',
        date: { start: null, end: null }
    },
    paths: {
        placeholderImage: 'images/placeholder-doc.png'
    }
};

// State management
const state = {
    currentPage: 1,
    allDocuments: [],
    filteredDocuments: [],
};

// DOM Elements
const elements = {
    searchInput: document.getElementById('searchInput'),
    documentsContainer: document.getElementById('documentsContainer'),
    loadingIndicator: document.getElementById('loadingIndicator'),
    resultsCount: document.getElementById('resultsCount'),
    pagination: document.getElementById('pagination'),
    categoryFilter: document.getElementById('categoryFilter'),
    dateRangeFilter: document.getElementById('dateRangeFilter')
};

// Initialize application
document.addEventListener('DOMContentLoaded', () => {
    loadDocuments();
    setupEventListeners();
});

// Event Listeners
function setupEventListeners() {
    elements.searchInput.addEventListener('input', debounce(applyFilters, 300));
    elements.categoryFilter?.addEventListener('change', applyFilters);
    elements.dateRangeFilter?.addEventListener('change', applyFilters);
}

// Documents Loading
function loadDocuments() {
    showLoading(true);
    
    fetch(CONFIG.docsUrl)
        .then(response => response.text())
        .then(html => {
            // Parse the Google Docs HTML content
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            
            // Extract document content and metadata
            state.allDocuments = parseDocumentContent(doc);
            state.filteredDocuments = [...state.allDocuments];
            
            displayDocuments();
            showLoading(false);
        })
        .catch(error => {
            console.error('Error loading documents:', error);
            showError('Failed to load documents. Please try again later.');
            showLoading(false);
        });
}

function parseDocumentContent(doc) {
    // Extract content from Google Docs HTML
    const content = doc.querySelector('.doc-content');
    if (!content) return [];

    // Parse sections into separate documents
    return Array.from(content.children)
        .reduce((documents, element) => {
            if (element.tagName === 'H1') {
                // New document starts with H1
                documents.push({
                    title: element.textContent,
                    content: [],
                    date: extractDate(element),
                    category: extractCategory(element)
                });
            } else if (documents.length > 0) {
                // Add content to current document
                documents[documents.length - 1].content.push(element.outerHTML);
            }
            return documents;
        }, []);
}

function createDocumentCard(document) {
    const title = document.title || 'Untitled Document';
    const preview = document.content.slice(0, 150) + '...';
    
    return `
        <div class="col-md-4 mb-4">
            <div class="card h-100 shadow-sm hover:shadow-lg transition-all duration-300">
                <div class="card-body d-flex flex-column p-4">
                    <h5 class="card-title fs-4 mb-2">${title}</h5>
                    ${document.category ? `
                        <span class="badge bg-secondary mb-2">${document.category}</span>
                    ` : ''}
                    ${document.date ? `
                        <p class="text-muted mb-3">
                            <i class="far fa-calendar-alt me-2"></i>${document.date}
                        </p>
                    ` : ''}
                    <div class="preview-text mb-3">
                        ${preview}
                    </div>
                    <button class="btn btn-primary mt-auto" 
                            onclick="showDocumentDetails('${encodeURIComponent(JSON.stringify(document))}')">
                        View Document
                        <i class="fas fa-external-link-alt ms-2"></i>
                    </button>
                </div>
            </div>
        </div>
    `;
}

function createDocumentModal(document) {
    return `
        <div class="modal fade" id="documentModal" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">${document.title}</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="document-metadata mb-4">
                            ${document.category ? `
                                <span class="badge bg-secondary me-2">${document.category}</span>
                            ` : ''}
                            ${document.date ? `
                                <span class="text-muted">
                                    <i class="far fa-calendar-alt me-2"></i>${document.date}
                                </span>
                            ` : ''}
                        </div>
                        <div class="document-content">
                            ${document.content.join('')}
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" onclick="printDocument()">
                            <i class="fas fa-print me-2"></i>Print
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;
}

function displayDocuments() {
    if (state.filteredDocuments.length === 0) {
        showNoResults();
        return;
    }

    const start = (state.currentPage - 1) * CONFIG.documentsPerPage;
    const end = start + CONFIG.documentsPerPage;
    const documentsToShow = state.filteredDocuments.slice(start, end);

    elements.documentsContainer.innerHTML = `
        <div class="row">
            ${documentsToShow.map(createDocumentCard).join('')}
        </div>
    `;

    updateResultsCount();
    updatePagination();
}

function showDocumentDetails(documentJSON) {
    try {
        const document = JSON.parse(decodeURIComponent(documentJSON));
        
        const existingModal = document.getElementById('documentModal');
        if (existingModal) {
            existingModal.remove();
        }
        
        document.body.insertAdjacentHTML('beforeend', createDocumentModal(document));
        const modal = new bootstrap.Modal(document.getElementById('documentModal'));
        modal.show();
    } catch (error) {
        console.error('Error showing document details:', error);
    }
}

function printDocument() {
    const content = document.querySelector('.document-content').innerHTML;
    const printWindow = window.open('', '_blank');
    printWindow.document.write(`
        <html>
            <head>
                <title>Print Document</title>
                <link href="your-styles.css" rel="stylesheet">
            </head>
            <body>
                ${content}
                <script>
                    window.onload = function() {
                        window.print();
                        window.onafterprint = function() {
                            window.close();
                        }
                    }
                </script>
            </body>
        </html>
    `);
    printWindow.document.close();
}

// Filter Functions
function applyFilters() {
    const searchQuery = elements.searchInput.value.toLowerCase().trim();
    const selectedCategory = elements.categoryFilter?.value || 'all';
    
    state.filteredDocuments = state.allDocuments.filter(doc => {
        const matchesSearch = !searchQuery || 
            doc.title.toLowerCase().includes(searchQuery) ||
            doc.content.some(content => content.toLowerCase().includes(searchQuery));
            
        const matchesCategory = selectedCategory === 'all' || 
            doc.category === selectedCategory;

        return matchesSearch && matchesCategory;
    });

    state.currentPage = 1;
    displayDocuments();
}

// Utility Functions
function debounce(func, wait) {
    let timeout;
    return function(...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), wait);
    };
}

function extractDate(element) {
    // Implement date extraction logic based on your document structure
    return null;
}

function extractCategory(element) {
    // Implement category extraction logic based on your document structure
    return null;
}

function showLoading(show) {
    elements.loadingIndicator.style.display = show ? 'block' : 'none';
}

function showError(message) {
    elements.documentsContainer.innerHTML = `
        <div class="alert alert-danger">${message}</div>
    `;
}

function showNoResults() {
    elements.documentsContainer.innerHTML = `
        <div class="alert alert-warning">
            No documents found matching your criteria. Try adjusting your search or filters.
        </div>
    `;
}

function updateResultsCount() {
    elements.resultsCount.innerHTML = `
        <div class="alert alert-info">
            Found ${state.filteredDocuments.length} document(s)
        </div>
    `;
}

function updatePagination() {
    const totalPages = Math.ceil(state.filteredDocuments.length / CONFIG.documentsPerPage);
    
    elements.pagination.innerHTML = Array.from({ length: totalPages }, (_, i) => i + 1)
        .map(page => `
            <li class="page-item ${page === state.currentPage ? 'active' : ''}">
                <a class="page-link" href="#" data-page="${page}">${page}</a>
            </li>
        `).join('');

    elements.pagination.querySelectorAll('.page-link').forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            changePage(parseInt(e.target.dataset.page));
        });
    });
}

function changePage(page) {
    state.currentPage = page;
    displayDocuments();
    window.scrollTo({ top: 0, behavior: 'smooth' });
}
